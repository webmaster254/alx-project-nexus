# Generated by Django 4.2.23 on 2025-08-06 19:52

from django.db import migrations
from django.contrib.postgres.operations import TrigramExtension


class Migration(migrations.Migration):

    dependencies = [
        ("jobs", "0003_add_performance_indexes"),
    ]

    operations = [
        # Enable PostgreSQL trigram extension for similarity searches
        TrigramExtension(),
        
        # Add search vector column for full-text search
        migrations.RunSQL(
            "ALTER TABLE job ADD COLUMN search_vector tsvector;",
            reverse_sql="ALTER TABLE job DROP COLUMN search_vector;"
        ),
        
        # Create function to update search vector
        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION update_job_search_vector() RETURNS trigger AS $$
            BEGIN
                NEW.search_vector := 
                    setweight(to_tsvector('english', COALESCE(NEW.title, '')), 'A') ||
                    setweight(to_tsvector('english', COALESCE(NEW.description, '')), 'B') ||
                    setweight(to_tsvector('english', COALESCE(NEW.required_skills, '')), 'C') ||
                    setweight(to_tsvector('english', COALESCE(NEW.preferred_skills, '')), 'C') ||
                    setweight(to_tsvector('english', COALESCE(NEW.location, '')), 'D');
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
            """,
            reverse_sql="DROP FUNCTION IF EXISTS update_job_search_vector();"
        ),
        
        # Create trigger to automatically update search vector
        migrations.RunSQL(
            """
            CREATE TRIGGER job_search_vector_update 
            BEFORE INSERT OR UPDATE ON job 
            FOR EACH ROW EXECUTE FUNCTION update_job_search_vector();
            """,
            reverse_sql="DROP TRIGGER IF EXISTS job_search_vector_update ON job;"
        ),
        
        # Update existing records with search vectors
        migrations.RunSQL(
            """
            UPDATE job SET search_vector = 
                setweight(to_tsvector('english', COALESCE(title, '')), 'A') ||
                setweight(to_tsvector('english', COALESCE(description, '')), 'B') ||
                setweight(to_tsvector('english', COALESCE(required_skills, '')), 'C') ||
                setweight(to_tsvector('english', COALESCE(preferred_skills, '')), 'C') ||
                setweight(to_tsvector('english', COALESCE(location, '')), 'D');
            """,
            reverse_sql=""
        ),
        
        # Create GIN index for full-text search
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS job_search_vector_idx ON job USING GIN(search_vector);",
            reverse_sql="DROP INDEX IF EXISTS job_search_vector_idx;"
        ),
        
        # Create additional GIN indexes for individual text fields
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS job_title_gin_idx ON job USING GIN(to_tsvector('english', title));",
            reverse_sql="DROP INDEX IF EXISTS job_title_gin_idx;"
        ),
        
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS job_description_gin_idx ON job USING GIN(to_tsvector('english', description));",
            reverse_sql="DROP INDEX IF EXISTS job_description_gin_idx;"
        ),
        
        # Create trigram indexes for similarity search
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS job_title_trgm_idx ON job USING GIN(title gin_trgm_ops);",
            reverse_sql="DROP INDEX IF EXISTS job_title_trgm_idx;"
        ),
        
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS job_location_trgm_idx ON job USING GIN(location gin_trgm_ops);",
            reverse_sql="DROP INDEX IF EXISTS job_location_trgm_idx;"
        ),
        
        # Add search vector for Company model
        migrations.RunSQL(
            "ALTER TABLE company ADD COLUMN search_vector tsvector;",
            reverse_sql="ALTER TABLE company DROP COLUMN search_vector;"
        ),
        
        # Create function to update company search vector
        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION update_company_search_vector() RETURNS trigger AS $$
            BEGIN
                NEW.search_vector := 
                    setweight(to_tsvector('english', COALESCE(NEW.name, '')), 'A') ||
                    setweight(to_tsvector('english', COALESCE(NEW.description, '')), 'B');
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
            """,
            reverse_sql="DROP FUNCTION IF EXISTS update_company_search_vector();"
        ),
        
        # Create trigger for company search vector
        migrations.RunSQL(
            """
            CREATE TRIGGER company_search_vector_update 
            BEFORE INSERT OR UPDATE ON company 
            FOR EACH ROW EXECUTE FUNCTION update_company_search_vector();
            """,
            reverse_sql="DROP TRIGGER IF EXISTS company_search_vector_update ON company;"
        ),
        
        # Update existing company records
        migrations.RunSQL(
            """
            UPDATE company SET search_vector = 
                setweight(to_tsvector('english', COALESCE(name, '')), 'A') ||
                setweight(to_tsvector('english', COALESCE(description, '')), 'B');
            """,
            reverse_sql=""
        ),
        
        # Create GIN index for company search
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS company_search_vector_idx ON company USING GIN(search_vector);",
            reverse_sql="DROP INDEX IF EXISTS company_search_vector_idx;"
        ),
    ]
